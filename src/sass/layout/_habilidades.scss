.component_skills {

  h3 {
    padding-bottom: 30px;
  };
  
  /*
    usamos DISPLAY para crear una rejilla
  */
  .container_skills {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
    gap: 20px;
      
    /*
      importante definir POSITION y Z-INDEX para posicionar
      esta TAG sobre la barra de progreso
    */
    article { 
      text-align: center;
      position: relative;
      z-index: 0;
      background-color: $background_one;
      border: $border_one;
      border-radius: 10px;
      cursor: pointer;

      /*
        creamos la barra de progreso usando :BEFORE, definimos POSITION y las 
        porpiedades de medida para ubicar la barra de progreso y definimos un WIDTH 0
      */
      &:before{
        content: '';
        position: absolute;
        z-index: -2;
        left: 0;
        top: 0;
        width: 0%;
        height: 20px;
        border-radius: 10px 10px 10px 0;
        transition: all .5s ease;
      };

      /*
        haciendo :HOVER a las clases de la TAG ARTICLE redefinimos el WIDTH 
        definido en :BEFORE logrando el fecto de barra de progreso 
      */
      &.html:hover:before, &.css:hover:before {
        width: 80%;
      };

      &.sass:hover:before, &.ui_ux:hover:before {
        width: 90%;
      };

      &.bootstrap:hover:before, &.javascript:hover:before, &.angular:hover:before {
        width: 70%;
      };

      &.nodejs:hover:before, &.mysql:hover:before, &.mongodb:hover:before, &.git:hover:before {
        width: 50%;
      };

      &.illustrator:hover:before {
        width: 20%;
      };

      /*
        cuando hacemos :HOVER en las TAGS ARTICLE a√±adimos una animacion en 
        (box_img_skills) que translada la IMG generando un efecto de movimiento
      */
      &:hover .box_img_skills {
        // animation: img_Move 1s infinite;

        @keyframes img_Move {
          0% {
            transform: translateY(0);
          }
          50% {
            transform: translateY(-10px);
          } 
          100% {
            transform: translateY(0);
          } 
        }
      };

      /*
        cuando hacemos :HOVER en las TAGS ARTICLE redefinimos OPACITY propeidad 
        definida en (box_level_skills)
      */
      &:hover .box_level_skills {
        opacity: 1;
      };


      .box_img_skills {
        padding: 48px 0 10px;

        img {
          width: 144px;
          height: 144px
        };
      };

      
      /*
        definimos OPACITY 0 para luego redefinirlo cuando
        hagamos :HOVER en las TAGS ARTICLES
      */
      .box_level_skills {
        padding: 20px 0;
        font-size: 80px;
        font-family: 'PT Sans', sans-serif;
        color: $color_one;
        border-radius: 0 0 10px 10px;
        opacity: 0;
        transition: all .5s ease-in-out;
      };
    };
  };
};


/*
  clases de este componente que comparten propiedades
*/
.html:hover:before, .html_level {
  background-color: #FF6D00;
};

.css:hover:before, .css_level {
  background-color: #039BE5;
};

.sass:hover:before, .sass_level {
  background-color: #F06292;
};

.bootstrap:hover:before, .bootstrap_level {
  background-color: #673AB7;
};

.javascript:hover:before, .javascript_level {
  background-color: #FFD600;
};

.angular:hover:before, .angular_level {
  background-color: #DD2C00;
};

.nodejs:hover:before, .nodejs_level {
  background-color: #388E3C;
};

.mysql:hover:before, .mysql_level {
  background-color: #F57F17;
};

.mongodb:hover:before, .mongodb_level {
  background-color: #4CAF50;
};

.git:hover:before, .git_level {
  background-color: #F4511E;
};

.illustrator:hover:before, .illustrator_level {
  background-color: #1C0802;
};

.ui_ux:hover:before, .ui_ux_level {
  background-color: #83D8F4;
};